cmake_minimum_required(VERSION 2.8.3)

# options
option (BUILD_KOKKOS "Whether or not kokkos is build as an external project" OFF)
option (USE_MPI "Activate / want MPI build" ON)
option (USE_VTK "Activate / want VTK build" OFF)

if(BUILD_KOKKOS)
  project(kokkos)
  include(cmake/buildExternal_Kokkos.cmake)
  return()
else()
  project(ppkMHD CXX)
endif()

#
# default local cmake macro repository
#
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})


#
# Prevent from build in source tree
#
include(${PROJECT_SOURCE_DIR}/cmake/preventBuildInSource.cmake)

#
# Create project version (using git info ?)
# TODO
#

#
# Init build type: Release, Debug, ...
#
include(${PROJECT_SOURCE_DIR}/cmake/initBuildType.cmake)

#
# Write a small header with build data, git version, etc...
#
include(${PROJECT_SOURCE_DIR}/cmake/write_version.cmake)

#
# Initialize CMAKE_MODULE_PATH for Kokkos (location of kokkos.cmake)
#
include(${PROJECT_SOURCE_DIR}/cmake/initKokkosModulePath.cmake)

# At this stage CMAKE_MODULE_PATH must have been populated
# with Kokkos installation path, so we can safely include kokkos.cmake
#
# kokkos.cmake contains Kokkos configuration
# we assume this file to be generated by kokkos itself
#
message (STATUS "Just printing CMAKE_MODULE_PATH " ${CMAKE_MODULE_PATH})
include(kokkos)

#
# External packages: MPI, ...
#

#find_package(MPI REQUIRED)
find_package(MPI)

# VTK configuration tips, see
# /usr/lib/cmake/vtk-6.2/VTKConfig.cmake
# /usr/lib/cmake/vtk-6.2/UseVTK.cmake
find_package(VTK)
if (USE_VTK)

  # the following add VTK to all targets
  # if(VTK_FOUND)
  #   include(${VTK_USE_FILE})
  # endif(VTK_FOUND)
  if (VTK_FOUND)
    message("***VTK FOUND ${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}")
  else()
    message ("*** VTK NOT FOUND")
  endIF()
endif(USE_VTK)


# Eigen3 (for MOOD) -- not mature enought to be used with nvcc_wrapper,
# even on host code, I was not able to build code with nvcc_wrapper
#find_package(Eigen3)

# LAPACK / LAPACKE (for MOOD) - for DGEQRF and DTRSM (on host, not device)
find_package(BLAS REQUIRED)
find_package(LAPACKE REQUIRED)
if ( NOT LAPACKE_FOUND )
  message(FATAL_ERROR "Package LAPACKE required, but not found!")
endif( NOT LAPACKE_FOUND )

#
# common flags
#
if (KOKKOS_INTERNAL_USE_CUDA MATCHES "1")
  set(CMAKE_CXX_FLAGS  "${KOKKOS_CPPFLAGS} ${KOKKOS_CXXFLAGS} ${CMAKE_CXX_FLAGS} -DUSE_DOUBLE -DCUDA")
else()
  set(CMAKE_CXX_FLAGS  "${KOKKOS_CPPFLAGS} ${KOKKOS_CXXFLAGS} ${CMAKE_CXX_FLAGS} -DUSE_DOUBLE")
endif()
  
set(CMAKE_EXE_LINKER_FLAGS  "${KOKKOS_LDFLAGS} ${CMAKE_EXE_LINKER_FLAGS}")


#
# sources
#
add_subdirectory(test)
add_subdirectory(src)
